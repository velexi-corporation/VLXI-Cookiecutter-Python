name: CI

on:
  push:
    branches:
      - main
    tags: '*'

  pull_request:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: {% raw %}${{ github.workflow }}-${{ github.ref }}{% endraw %}
  cancel-in-progress: {% raw %}${{ startsWith(github.ref, 'refs/pull/') }}{% endraw %}

jobs:
  run-tests:
    name: {% raw %}Python ${{ matrix.python-version }} (${{ matrix.os }}, ${{ matrix.arch }}){% endraw %}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest{% if cookiecutter.ci_include_windows == "yes" %}, windows-latest{% endif %}{% if cookiecutter.ci_include_macOS == "yes" %}, macOS-latest{% endif %}]
        arch: [x64{% if cookiecutter.ci_include_x86 == "yes" %}, x86{% endif %}]
        python-version: ["3.9", "3.10", "3.11"]
{% if cookiecutter.ci_include_x86 == "yes" and cookiecutter.ci_include_macOS == "yes" %}
        exclude:
          - os: macOS-latest
            arch: x86
{% endif %}

    defaults:
      run:
        shell: bash

    runs-on: {% raw %}${{ matrix.os }}{% endraw %}
{% if cookiecutter.ci_include_codecov == "yes" %}
    env:
        codecov-arch: x64
        codecov-version: "3.11"
{% endif %}
    steps:

      # --- Check out code and setup Python

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: {% raw %}${{ matrix.python-version }}{% endraw %}

      # --- Install Poetry

      - name: Load cached $HOME/.local
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: {% raw %}${{ github.workflow }}-${{ github.job }}-dotlocal-${{ runner.os }}-${{ runner.arch }}-${{ matrix.python-version }}-${{ hashFiles('.github/workflows/CI.yml') }}{% endraw %}

      - name: Install Python poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # --- Install package dependencies

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: {% raw %}${{ github.workflow }}-${{ github.job }}-venv-${{ runner.os }}-${{ runner.arch }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}{% endraw %}

      - name: Install package dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --with test

      # --- Run tests

      - name: Run tests
        run: |
          source $VENV
          poetry run pytest --cov-report=xml
{% if cookiecutter.ci_include_codecov == "yes" %}
      # --- Upload coverage reports

      - name: Upload coverage reports to Codecov
        # Only run for 'main' branch running on 'Linux' with the latest version of Python
        if: |
            github.ref_name == 'main' &&
            runner.os == 'Linux' &&
            matrix.arch == env.codecov-arch &&
            matrix.python-version == env.codecov-version

        uses: codecov/codecov-action@v3
        with:
          token: {% raw %}${{ secrets.CODECOV_TOKEN }}{% endraw %}
          file: ./coverage.xml
          fail_ci_if_error: true
{% endif %}
{% if cookiecutter.enable_github_pages == "yes" %}
  build-docs:
    name: Build Documentation

    runs-on: ubuntu-latest

    env:
      python-version: "3.11"

    steps:
      # --- Check out code and setup Python

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: {% raw %}${{ env.python-version }}{% endraw %}

      # --- Install Poetry

      - name: Load cached $HOME/.local
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: {% raw %}${{ github.workflow }}-${{ github.job }}-dotlocal-${{ runner.os }}-${{ runner.arch }}-${{ env.python-version }}-${{ hashFiles('.github/workflows/CI.yml') }}{% endraw %}

      - name: Install Python poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # --- Install package dependencies

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: {% raw %}${{ github.workflow }}-${{ github.job }}-venv-${{ runner.os }}-${{ runner.arch }}-${{ env.python-version }}-${{ hashFiles('**/poetry.lock') }}{% endraw %}

      - name: Install package dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --with docs

      # --- Build documentation

      - name: Build documentation
        run: poetry run make docs

      # --- Upload GitHub Pages artifact

      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: docs/{{ cookiecutter.__project_name }}

  deploy-docs:
    name: Deploy Documentation

    if: github.ref_name == 'main'

    needs: build-docs

    environment:
      name: github-pages
      url: {% raw %}${{ steps.deployment.outputs.page_url }}{% endraw %}$

    runs-on: ubuntu-latest

    env:
      python-version: "3.11"

    # Set permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      # --- Set up GitHub Pages

      - name: Set up GitHub Pages
        uses: actions/configure-pages@v3

      # --- Deploy documentation

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
{% endif %}
